def secrets = [
  [path: 'secret/jenkins/github', engineVersion: 2, secretValues: [
    [envVar: 'GITHUB_TOKEN', vaultKey: 'public_token']]],
  [path: 'secret/jenkins/aws', engineVersion: 2, secretValues: [
    [envVar: 'AWS_ACCESS_KEY_ID', vaultKey: 'aws_access_key_id'],
    [envVar: 'AWS_SECRET_ACCESS_KEY', vaultKey: 'aws_secret_access_key']]],
  [path: 'secret/jenkins/npm', engineVersion: 2, secretValues: [
    [envVar: 'NPM_TOKEN', vaultKey: 'token']]],
]

@Library('pipeline-shared-library') _

def configuration = [vaultUrl: "${env.VAULT_URL}",  vaultCredentialId: 'vault-app-role', engineVersion: 2]

def getPublishVersion(String branch){
  return branch.replace('publish-v','')
}

pipeline {
  agent {
    kubernetes {
      defaultContainer 'jnlp'
      yamlFile 'jenkins/build-pod.yaml'
    }
  }

  environment {
    MAIN_BRANCH = 'master'
    WORKSPACE = "${env.WORKSPACE}"
    BRANCH = "${env.BRANCH_NAME}"
    PROJECT = "cloudify-ui-components"
  }

  options {
    checkoutToSubdirectory('cloudify-ui-components')
    buildDiscarder(logRotator(numToKeepStr:'30'))
    timeout(time: 60, unit: 'MINUTES')
    timestamps()
  }
  stages {
    stage('Set working dir ownership'){
      steps {
        container('node'){
          dir("${env.WORKSPACE}/${env.PROJECT}") {
            // Workaround for https://github.com/cypress-io/cypress/issues/20286
            sh "chown -R `whoami` ."
          }
        }
      }
    }
    stage('Install & Audit'){
      parallel{
        stage('Audit'){
          steps {
            catchError(buildResult: 'UNSTABLE', stageResult: 'FAILURE'){
              container('node'){
                dir("${env.WORKSPACE}/${env.PROJECT}") {
                  echo 'Run npm production dependencies security audit'
                  sh 'npm run audit'
                }
              }
            }
          }
        }
        stage('Clean Install') {
          steps {
            container('node'){
              dir("${env.WORKSPACE}/${env.PROJECT}") {
                restoreArchiveFolder('~/.npm', "${env.WORKSPACE}/${env.PROJECT}/package-lock.json", 'components-mb', 'npm_dir', '/mnt/data')
                echo "Install dependencies"
                sh 'npm ci --prefer-offline'
                archiveFolder('~/.npm', "${env.WORKSPACE}/${env.PROJECT}/package-lock.json", 'components-mb', 'npm_dir', '/mnt/data')
              }
            }
          }
        }
      }
    }
    stage('Build & Tests'){
      parallel{
        stage('Build & Storybook'){
          steps{
            container('node'){
              dir("${env.WORKSPACE}/${env.PROJECT}") {
                echo "Build UI components"
                sh 'npm run build'

                echo "Build Storybook"
                sh 'npm run build-storybook'
              }
            }
          }
        }

        stage('Static analysis & Unit tests'){
          steps{
            container('node'){
              dir("${env.WORKSPACE}/${env.PROJECT}") {
                echo "Run static analysis and check code style"
                sh 'npm run lint'

                echo "Check TypeScript types"
                sh "npm run check-types"

                echo "Run Jest tests"
                sh 'npm run test:jest'
              }
            }
          }
        }
      }
    }
    stage('Visual Tests') {
      steps {
        container('node'){
          dir("${env.WORKSPACE}/${env.PROJECT}") {
            echo "Run Loki tests"
            sh '''
              apt-get update --allow-insecure-repositories && apt-get -y install graphicsmagick
              google-chrome --version
            '''
            catchError(buildResult: 'FAILURE', stageResult: 'FAILURE') {
              sh 'npm run test:loki'
            }

            echo "Saving Loki generated files"
            sh 'tar czf current.tar.gz .loki/current'
            archiveArtifacts artifacts: 'current.tar.gz'
            archiveArtifacts artifacts: './loki/difference/*.png', allowEmptyArchive: true
          }
        }
      }
    }
    stage('Publish') {
      when {
        expression { return env.BRANCH =~ /^publish_v.*/ }
      }
      steps {
        container('node'){
          dir("${env.WORKSPACE}/${env.PROJECT}") {
            withVault([configuration: configuration, vaultSecrets: secrets]) {
              echo "Authenticate with registry"
              sh "echo '//registry.npmjs.org/:_authToken=${env.NPM_TOKEN}' > .npmrc"

              echo "Publish package"
              sh 'npm publish'

              echo "Setup git user"
              sh '''
                git config user.email "cosmo-admin@github.com"
                git config user.name "cosmo-admin-CI"
              '''

              echo "Update main branch"
              sh """
                git config remote.origin.fetch '+refs/heads/*:refs/remotes/origin/*'
                git fetch --all
                git checkout ${env.MAIN_BRANCH}
                git merge --ff-only origin/${env.BRANCH}
                git push -q https://${env.GITHUB_TOKEN}@github.com/cloudify-cosmo/cloudify-ui-components.git ${env.MAIN_BRANCH}
              """

              echo "Remove publish branch"
              sh "git push -q https://${env.GITHUB_TOKEN}@github.com/cloudify-cosmo/cloudify-ui-components.git --delete ${env.BRANCH}"
            }
          }
        }
      }
    }
    stage('Deploy') {
      when {
        expression { return env.BRANCH =~ /^publish-v.*/ }
      }
      steps {
        container('awscli'){
          dir("${env.WORKSPACE}/${env.PROJECT}") {
            withVault([configuration: configuration, vaultSecrets: secrets]) {
              echo "Setting Signature Version 4 for S3 Request Authentication"
              sh "aws configure set default.s3.signature_version s3v4"

              echo "Deploy to S3"
              sh "aws s3 sync storybook-static s3://docs.cloudify.co/ui-components/${getPublishVersion(BRANCH)} --delete --acl public-read"
            }
          }
        }
      }
    }
  }
}
